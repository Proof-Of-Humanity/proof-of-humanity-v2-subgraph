type Party @entity(immutable: false) {
  # none / requester / challenger
  id: ID!
  count: BigInt!
  challengesWon: [Challenge!]! @derivedFrom(field: "ruling")
}

type Reason @entity(immutable: false) {
  # none / incorrectSubmission / identityTheft / sybilAttack / deceased
  id: ID!
  count: BigInt!
  challenges: [Challenge!]! @derivedFrom(field: "reason")
}

type Status @entity(immutable: false) {
  # vouching / resolving / disputed / resolved / withdrawn
  id: ID!
  count: BigInt!
  requests: [Request!]! @derivedFrom(field: "status")
}

type Contract @entity(immutable: false) {
  # address
  id: Bytes!
  baseDeposit: BigInt!
  humanityLifespan: BigInt!
  renewalPeriodDuration: BigInt!
  challengePeriodDuration: BigInt!
  requiredNumberOfVouches: BigInt!
  latestArbitratorHistory: ArbitratorHistory
}

type ArbitratorHistory @entity(immutable: true) {
  # arbHistId
  id: ID!
  arbitrator: Bytes!
  extraData: Bytes!
  registrationMeta: String!
  clearingMeta: String!
  updateTime: BigInt!
  requests: [Request!]! @derivedFrom(field: "arbitratorHistory")
}

type Registration @entity(immutable: false) {
  # hash(pohId//claimer)
  id: Bytes!
  humanity: Humanity!
  claimer: Claimer!
  expirationTime: BigInt!
}

type Humanity @entity(immutable: false) {
  # pohId
  id: Bytes!
  registration: Registration @derivedFrom(field: "humanity")
  vouching: Boolean!
  usedVouch: VouchInProcess @derivedFrom(field: "voucher")
  pendingRevocation: Boolean!
  requests: [Request!]! @derivedFrom(field: "humanity")
  claimerName: String
  nbRequests: BigInt!
  nbLegacyRequests: BigInt!
  nbPendingRequests: BigInt!
  nbBridgedRequests: BigInt!
  inTransfer: Boolean!
  circleAccount: CirclesAccount
}

type Claimer @entity(immutable: false) {
  # address
  id: Bytes!
  name: String
  currentRequest: Request
  registration: Registration @derivedFrom(field: "claimer")
  vouches: [Vouch!]! @derivedFrom(field: "from")
  vouchesReceived: [Vouch!]! @derivedFrom(field: "for")
  nbVouchesReceived: BigInt!
}

type Request @entity(immutable: false) {
  # hash(pohId//i)
  id: Bytes!
  humanity: Humanity!
  index: BigInt!
  status: Status!
  requester: Bytes!
  revocation: Boolean!
  claimer: Claimer!
  creationTime: BigInt!
  resolutionTime: BigInt!
  lastStatusChange: BigInt!
  challengePeriodEnd: BigInt!
  ultimateChallenger: Challenger
  winnerParty: Party
  arbitratorHistory: ArbitratorHistory!
  evidenceGroup: EvidenceGroup!
  vouches: [VouchInProcess!]! @derivedFrom(field: "request")
  nbChallenges: BigInt!
  challenges: [Challenge!]! @derivedFrom(field: "request")
  contributors: [Bytes!]!
  registrationEvidenceRevokedReq: String!
}

type Challenger @entity(immutable: false) {
  # address
  id: Bytes!
  wins: [Request!]! @derivedFrom(field: "ultimateChallenger")
  challenges: [Challenge!]! @derivedFrom(field: "challenger")
}

type Challenge @entity(immutable: false) {
  # hash(request.id//i)
  id: Bytes!
  index: BigInt!
  request: Request!
  reason: Reason!
  challenger: Challenger
  creationTime: BigInt!
  disputeId: BigInt!
  ruling: Party!
  nbRounds: BigInt!
  rounds: [Round!]! @derivedFrom(field: "challenge")
}

type Round @entity(immutable: false) {
  # hash(challenge.id//i)
  id: Bytes!
  index: BigInt!
  creationTime: BigInt!
  challenge: Challenge!
  requesterFund: RequesterFund!
  challengerFund: ChallengerFund
}

interface Fund {
  # hash(round.id//party)
  id: Bytes!
  amount: BigInt!
  withdrawn: Boolean!
  feeRewards: BigInt!
  contributions: [Contribution!]! @derivedFrom(field: "fund")
  round: Round!
}

type RequesterFund implements Fund @entity(immutable: false) {
  id: Bytes!
  amount: BigInt!
  withdrawn: Boolean!
  feeRewards: BigInt!
  contributions: [Contribution!]! @derivedFrom(field: "fund")
  round: Round! @derivedFrom(field: "requesterFund")
}

type ChallengerFund implements Fund @entity(immutable: false) {
  id: Bytes!
  amount: BigInt!
  withdrawn: Boolean!
  round: Round! @derivedFrom(field: "challengerFund")
  feeRewards: BigInt!
  contributions: [Contribution!]! @derivedFrom(field: "fund")
}

type Contribution @entity(immutable: false) {
  # hash(fund.id//contributor)
  id: Bytes!
  fund: Fund!
  contributor: Bytes!
  amount: BigInt!
}

type Vouch @entity(immutable: false) {
  # hash(claimer.id//pohId//voucher.id)
  id: Bytes!
  from: Claimer!
  humanity: Humanity!
  for: Claimer!
}

type VouchInProcess @entity(immutable: false) {
  # hash(vouch.id)
  id: Bytes!
  vouch: Vouch!
  processed: Boolean!
  voucher: Humanity!
  request: Request!
}

type EvidenceGroup @entity(immutable: false) {
  # evidenceGroupId
  id: Bytes!
  length: BigInt!
  request: Request! @derivedFrom(field: "evidenceGroup")
  evidence: [Evidence!]! @derivedFrom(field: "group")
}

type Evidence @entity(immutable: true) {
  # hash(groupId//i)
  id: Bytes!
  group: EvidenceGroup!
  creationTime: BigInt!
  uri: String!
  submitter: Bytes!
}

type CrossChainRegistration @entity(immutable: false) {
  # pohId
  id: Bytes!
  claimer: Claimer!
  expirationTime: BigInt!
  lastReceivedTransferTimestamp: BigInt!
}

type OutTransfer @entity(immutable: false) {
  # pohId
  id: Bytes!
  foreignProxy: Bytes!
  transferHash: Bytes!
  transferTimestamp: BigInt!
}

type InTransfer @entity(immutable: true) {
  # transfer hash
  id: Bytes!
  humanityId: Bytes!
}

type CrossChainGateway @entity(immutable: false) {
  # gateway address
  id: Bytes!
  foreignProxy: Bytes!
}

# TODO: maybe change this into an Integration entity depending upon future integrations
type CirclesAccount @entity(immutable: false) {
  
  id: Bytes!                
  trustExpiryTime: BigInt! 
  humanities: [Humanity!]! @derivedFrom(field: "circleAccount")
}

type _Schema_
  @fulltext(
    name: "submissionSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Claimer", fields: [{ name: "name" }] }]
  )